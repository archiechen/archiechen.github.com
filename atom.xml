<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[碎片]]></title>
  <link href="http://archiechen.github.com/atom.xml" rel="self"/>
  <link href="http://archiechen.github.com/"/>
  <updated>2012-11-09T21:14:42+08:00</updated>
  <id>http://archiechen.github.com/</id>
  <author>
    <name><![CDATA[Archie]]></name>
    <email><![CDATA[chenyachuan@hotmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[bootstrap+jquery+jquerui实现拖拽式任务白板]]></title>
    <link href="http://archiechen.github.com/blog/2012/11/09/bootstrap-plus-jquery-plus-jqueruishi-xian-tuo-zhuai-shi-ren-wu-bai-ban/"/>
    <updated>2012-11-09T17:59:00+08:00</updated>
    <id>http://archiechen.github.com/blog/2012/11/09/bootstrap-plus-jquery-plus-jqueruishi-xian-tuo-zhuai-shi-ren-wu-bai-ban</id>
    <content type="html"><![CDATA[<p>bootstrap是一套Html+CSS+Javascript的轻量框架，可以很容易的实现美观的UI界面和动态效果，最近需要实现个拖拽效果，只用bootstrap没有现成的办法，就引入了jqueryui+jquery。基础页面样式引用了<a href="http://twitter.github.com/bootstrap/examples/starter-template.html">bootstrap starter</a>。</p>

<p>首先，把页面中引入的javascript和css都改成完整的URL，并加入jqueryui和jquery。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;http://twitter.github.com/bootstrap/assets/css/bootstrap.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;http://twitter.github.com/bootstrap/assets/css/doc.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;http://code.jquery.com/ui/1.9.1/themes/base/jquery-ui.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;http://twitter.github.com/bootstrap/assets/css/bootstrap-responsive.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意js文件放在页面的最后，这样可以使页面加载更快。这里我只引入了一个了bootstrap.js。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://twitter.github.com/bootstrap/assets/js/jquery.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://code.jquery.com/ui/1.9.1/jquery-ui.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://twitter.github.com/bootstrap/assets/js/bootstrap.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后删除页面中Container原来的内容，换成我们需要的白板栏，共有三个状态栏：New、Progress和Done。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;new_tasks&quot;</span> <span class="na">class=</span><span class="s">&quot;cardbox&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h4</span> <span class="na">class=</span><span class="s">&quot;page-header&quot;</span><span class="nt">&gt;</span>New<span class="nt">&lt;/h4&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;progress_tasks&quot;</span>  <span class="na">class=</span><span class="s">&quot;cardbox&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h4</span> <span class="na">class=</span><span class="s">&quot;page-header&quot;</span><span class="nt">&gt;</span>Progress<span class="nt">&lt;/h4&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;done_tasks&quot;</span>  <span class="na">class=</span><span class="s">&quot;cardbox&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h4</span> <span class="na">class=</span><span class="s">&quot;page-header&quot;</span><span class="nt">&gt;</span>Done<span class="nt">&lt;/h4&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>cardbox是自定义的样式表，用来显示一个状态栏位。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.cardbox</span> <span class="p">{</span> <span class="k">border</span><span class="o">:</span><span class="m">1px</span> <span class="k">solid</span> <span class="m">#AAA</span><span class="p">;</span> <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span> <span class="k">width</span><span class="o">:</span> <span class="m">31</span><span class="o">%</span><span class="p">;</span> <span class="k">min-height</span><span class="o">:</span> <span class="m">18em</span><span class="p">;</span> <span class="k">padding</span><span class="o">:</span> <span class="m">0.5em</span><span class="p">;}</span>
</span><span class='line'><span class="nc">.cardbox</span> <span class="nt">h4</span> <span class="p">{</span><span class="k">margin</span><span class="o">:</span> <span class="m">0px</span><span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>加上样式后是这样的：</p>

<p><img src="http://archiechen.github.com/images/bootstrap.png" alt="效果图" /></p>

<p>增加两个个卡片，这里使用html中的ul和li元素实现，不过要调整一下样式表，li元素用了样式ui-helper-reset，这是jqueryui支持的，目的是不显示列表前的原点儿。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;cardbox&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h4</span> <span class="na">class=</span><span class="s">&quot;page-header&quot;</span><span class="nt">&gt;</span>New<span class="nt">&lt;/h4&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;ui-helper-reset&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li&gt;&lt;h5&gt;</span>在弹出窗口中输入任务信息，点击save按钮保存到数据库。<span class="nt">&lt;/h5&gt;&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li&gt;&lt;h5&gt;</span>任务卡片可以在状态栏之间拖拽。<span class="nt">&lt;/h5&gt;&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>要增加一些css，控制任务卡片大小、内外边距以及拖拽时的鼠标图标。custom-state-active一会儿会用到，当状态栏允许放入时会变色。：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.cardbox</span> <span class="p">{</span><span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#AAA</span><span class="p">;</span><span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span><span class="k">margin-left</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span><span class="k">min-height</span><span class="o">:</span> <span class="m">46em</span><span class="p">;</span><span class="k">padding-left</span><span class="o">:</span> <span class="m">0.2em</span><span class="p">;</span> <span class="k">width</span><span class="o">:</span> <span class="m">31</span><span class="o">%</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.cardbox</span> <span class="nt">h4</span> <span class="p">{</span> <span class="k">line-height</span><span class="o">:</span> <span class="m">16px</span><span class="p">;</span> <span class="k">margin</span><span class="o">:</span> <span class="m">0</span> <span class="m">0</span> <span class="m">0.4em</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.cardbox</span> <span class="nt">h5</span> <span class="p">{</span> <span class="k">margin</span><span class="o">:</span> <span class="m">0.1em</span> <span class="m">0.1em</span> <span class="m">0</span> <span class="m">0.1em</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.cardbox.custom-state-active</span> <span class="p">{</span> <span class="k">background</span><span class="o">:</span> <span class="m">#eee</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.cardbox</span> <span class="nt">li</span> <span class="p">{</span><span class="k">background-color</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span><span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="m">#AAA</span><span class="p">;</span><span class="k">color</span><span class="o">:</span> <span class="m">#222</span><span class="p">;</span><span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span><span class="k">height</span><span class="o">:</span> <span class="m">84px</span><span class="p">;</span><span class="k">list-style</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span><span class="k">margin</span><span class="o">:</span> <span class="m">0.3em</span><span class="p">;</span><span class="k">padding</span><span class="o">:</span> <span class="m">0.2em</span><span class="p">;</span><span class="k">width</span><span class="o">:</span> <span class="m">164px</span><span class="p">;}</span>
</span><span class='line'><span class="nc">.cardbox</span> <span class="nt">li</span> <span class="nt">a</span> <span class="p">{</span> <span class="k">cursor</span><span class="o">:</span> <span class="n">move</span><span class="p">;</span> <span class="k">margin</span><span class="o">:</span> <span class="m">0</span> <span class="m">0</span> <span class="m">0.4em</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.cardbox</span> <span class="nt">li</span> <span class="nt">p</span> <span class="p">{</span> <span class="k">float</span><span class="o">:</span> <span class="k">right</span><span class="p">;</span> <span class="k">margin</span><span class="o">:</span> <span class="m">0</span> <span class="m">10px</span> <span class="m">10px</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>样式加好后，可以写js了，在页面的最后加上javascript块，先允许New中的任务卡片可以拖拽，具体参数参考<a href="http://api.jqueryui.com/draggable/">jqueryui文档</a>：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">$new_tasks</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;#new_tasks&quot;</span> <span class="p">),</span>
</span><span class='line'>    <span class="nx">$progress_tasks</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;#progress_tasks&quot;</span> <span class="p">),</span>
</span><span class='line'>    <span class="nx">$done_tasks</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;#done_tasks&quot;</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;li&quot;</span><span class="p">,</span> <span class="nx">$new_tasks</span> <span class="p">).</span><span class="nx">draggable</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">revert</span><span class="o">:</span> <span class="s2">&quot;invalid&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">containment</span><span class="o">:</span> <span class="s2">&quot;document&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">helper</span><span class="o">:</span> <span class="s2">&quot;clone&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">cursor</span><span class="o">:</span> <span class="s2">&quot;move&quot;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在任务卡片可以拖动了，但是还不能放到其他的状态栏目里，还需要设置其他栏目允许放置。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$progress_tasks</span><span class="p">.</span><span class="nx">droppable</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">accept</span><span class="o">:</span> <span class="s2">&quot;#new_tasks li&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">activeClass</span><span class="o">:</span> <span class="s2">&quot;ui-state-highlight&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">drop</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">event</span><span class="p">,</span> <span class="nx">ui</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">move_item</span><span class="p">(</span> <span class="nx">ui</span><span class="p">.</span><span class="nx">draggable</span> <span class="p">,</span> <span class="nx">$progress_tasks</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">move_item</span><span class="p">(</span> <span class="nx">$item</span><span class="p">,</span> <span class="nx">$tasks</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$item</span><span class="p">.</span><span class="nx">fadeOut</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">$list</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;ul&quot;</span><span class="p">,</span> <span class="nx">$tasks</span> <span class="p">).</span><span class="nx">length</span> <span class="o">?</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;ul&quot;</span><span class="p">,</span> <span class="nx">$tasks</span> <span class="p">)</span> <span class="o">:</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;&lt;ul class=&#39;ui-helper-reset&#39;/&gt;&quot;</span> <span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span> <span class="nx">$tasks</span> <span class="p">);</span>
</span><span class='line'>        <span class="nx">$item</span><span class="p">.</span><span class="nx">appendTo</span><span class="p">(</span> <span class="nx">$list</span> <span class="p">).</span><span class="nx">fadeIn</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>accept参数指定了那些元素可以被放入该栏目，这里允许New状态的任务卡放入。move_item函数负责将拖拽的元素从原栏目放入新栏目，如果新栏目中不存在ul元素，则创建一个，move_item函数在将卡片拖拽到Progress栏目中，释放鼠标时触发调用drop。按照这个逻辑，设置Done状态栏，只允许拖入Progress状态栏中的任务卡。此时拖拽New状态时，将不能放入Done状态栏。
为了可以将人物卡片重新放回New状态，需要设置New状态栏允许放置,并设置Progress状态和Done状态都可以拖入。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$new_tasks</span><span class="p">.</span><span class="nx">droppable</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">accept</span><span class="o">:</span> <span class="s2">&quot;#progress_tasks li,#done_tasks li&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">activeClass</span><span class="o">:</span> <span class="s2">&quot;ui-state-highlight&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">drop</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">event</span><span class="p">,</span> <span class="nx">ui</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">move_item</span><span class="p">(</span> <span class="nx">ui</span><span class="p">.</span><span class="nx">draggable</span> <span class="p">,</span> <span class="nx">$new_tasks</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>完整代码在这里<a href="https://gist.github.com/4045555">Gist</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OOBootcamp Season One 01]]></title>
    <link href="http://archiechen.github.com/blog/2012/11/05/oobootcamp-season-one-01/"/>
    <updated>2012-11-05T11:52:00+08:00</updated>
    <id>http://archiechen.github.com/blog/2012/11/05/oobootcamp-season-one-01</id>
    <content type="html"><![CDATA[<p>有幸请到了姜志辉老师来到公司帮助我们实施《OOBootcamp》这项培训计划。这项计划将持续四期，每期四次课，课程将采用训练营的方式，以实战为主，从动手中提炼和总结知识，讲师只负责引导和指点，与传统的填鸭式培训有很大的不同。第一季我们采用的语言是javascript，用一种大家都不熟悉的语言，来理解面向对象（OO）的本质。</p>

<h3>创建对象</h3>

<p>javascript中创建对象的两种方式,使用{}和new Object方式(objects.js)：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;assert&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;object&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;{}&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;obj&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">des</span><span class="o">:</span> <span class="s1">&#39;des&#39;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>        <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;obj&#39;</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;des&#39;</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">des</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;Object&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">obj2</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;obj2&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">obj2</span><span class="p">.</span><span class="nx">des</span> <span class="o">=</span> <span class="s1">&#39;des&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;obj2&#39;</span><span class="p">,</span> <span class="nx">obj2</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s1">&#39;des&#39;</span><span class="p">,</span> <span class="nx">obj2</span><span class="p">.</span><span class="nx">des</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码中使用了nodejs中的单元测试框架mocha，使用之前需要先用npm安装，安装到全局环境中需要加入参数“-g”：</p>

<pre><code>$ npm install -g mocha
</code></pre>

<p>使用require引入mocha：</p>

<pre><code>var assert = require('assert')
</code></pre>

<p>在describe的function中编写测试方法，第一个参数是一组测试的名称：</p>

<pre><code>describe('object', function() {
    //这里写测试。
});
</code></pre>

<p>在it的function中编写一个测试方法，第一个参数是单个测试的名称：</p>

<pre><code>it('{}', function() {
    //测试写在这里。
});
</code></pre>

<p>运行测试使用mocha，而不是node：</p>

<pre><code>$ mocha  objects.js 
․․
✔ 2 tests complete (2 ms)
</code></pre>

<h3>函数和作用域</h3>

<p>函数function是javascript的内建类型之一，javascript中的作用域分为全局作用域和局部作用域，局部作用域只体现在function中，即变量的作用域在声明变量的function中，未声明的变量默认使用全局作用域。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Person</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">age</span><span class="o">=</span><span class="mi">45</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">say_age</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">age</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Person这个function中，age相当与一个似有变量，他只能在function内部访问到，而name和say_age都可以在外部访问，同时say_age相当于封装了对age的访问，这就是使用function模拟类的定义。使用代码如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">jobs</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s1">&#39;jobs&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">jobs</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">jobs</span><span class="p">.</span><span class="nx">say_age</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行结果：</p>

<pre><code>$ node functions.js 
jobs
45
</code></pre>

<p>如果不使用new来创建Person对象，如下代码：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">iverson</span> <span class="o">=</span> <span class="nx">Person</span><span class="p">(</span><span class="s1">&#39;iverson&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">iverson</span><span class="p">));</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">say_age</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>不使用new的话，相当于只是执行了Person函数，由于函数没有返回值，因此iverson变量是undefined，而name和say_age则被赋值在全局作用域上。执行结果如下：</p>

<pre><code>$ node functions.js 
undefined
iverson
45
</code></pre>

<p>这一节演示的是使用function模拟类，使用function的作用域模拟类的私有属性。</p>

<h3>callback和工厂模式</h3>

<p>因为function也是对象，所以function也可以被当做参数或返回值处理。被当做参数时，就是callback方式，在函数内部可以执行传入的callback参数(callback.js)：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">func</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;jobs&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">func</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">foo</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ node callback.js 
jobs
</code></pre>

<p>下面定义一个普通的类Model(models.js)：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Model</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span><span class="nx">name</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">id</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">say</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">id</span><span class="o">+</span><span class="s1">&#39;:&#39;</span><span class="o">+</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">todo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Model</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="s1">&#39;todo1&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">todo</span><span class="p">.</span><span class="nx">say</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ node models.js 
1:todo1
</code></pre>

<p>修改为工厂模式是这样的：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Model</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span><span class="nx">name</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">id</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">say</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">id</span><span class="o">+</span><span class="s1">&#39;:&#39;</span><span class="o">+</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">todo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Model</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="s1">&#39;todo1&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">todo</span><span class="p">.</span><span class="nx">say</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ node models.js 
1:todo1
</code></pre>

<p>使用工厂模式时有一个好处，当忘记使用new创建对象的时候，创建的对象行为和使用new时是一样的。但也有一个缺点，看以下代码：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">todo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Model</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="s1">&#39;todo1&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">todo</span><span class="p">.</span><span class="nx">say</span><span class="p">();</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">todo</span> <span class="k">instanceof</span> <span class="nx">Model</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">todo</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ node models.js 
1:todo1
false
object
</code></pre>

<p>使用工厂模式创建的对象，类型不是Model，而是object。当使用工厂模式时，要考虑应用场景是否依赖对象的类型。</p>

<h3>类的继承</h3>

<p>继承是面向对象的一个重要特性，使用javascirpt模拟继承的代码(class.js)如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Class</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">inner</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
</span><span class='line'>         <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>         <span class="k">this</span><span class="p">.</span><span class="nx">show</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>             <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;show &#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">);</span>
</span><span class='line'>         <span class="p">};</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="nx">inner</span><span class="p">.</span><span class="nx">inherts</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">c</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">inner</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">c</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">inner</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">info</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;info&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">save</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;save&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">Person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Class</span><span class="p">();</span> <span class="c1">// class Person()</span>
</span><span class='line'><span class="nx">Person</span><span class="p">.</span><span class="nx">inherts</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</span><span class='line'><span class="nx">Person</span><span class="p">.</span><span class="nx">inherts</span><span class="p">(</span><span class="nx">obj2</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">jobs</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s1">&#39;jobs&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">jobs</span><span class="p">.</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'><span class="nx">jobs</span><span class="p">.</span><span class="nx">info</span><span class="p">();</span>
</span><span class='line'><span class="nx">jobs</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Class函数相当与定义类的语法，Class中的inner函数相当于类本身的定义，而inner函数中的name属性相当于类的私有属性。类的继承是通过在子类的prototype中增加父类的方法来实现。执行结果如下：</p>

<pre><code>$ node class.js 
show jobs
info
save
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[突破瓶颈，突破自己]]></title>
    <link href="http://archiechen.github.com/blog/2012/11/03/tu-po-ping-jing-%2Ctu-po-zi-ji/"/>
    <updated>2012-11-03T20:52:00+08:00</updated>
    <id>http://archiechen.github.com/blog/2012/11/03/tu-po-ping-jing-,tu-po-zi-ji</id>
    <content type="html"><![CDATA[<p>一口气读完了《突破瓶颈》，忽略关于销售、组织架构方面的内容，还是有些内容能吸引我。对谈到所谓的精神力量嗤之以鼻，向来反感鸡汤类型的说教，总是觉得说得都是正确的废话。吸引我的内容之一是度假管理系统这章，重点是系统，这从某种角度与戴明博士的理论很相似，要从系统的角度去分析和解决问题，而不是某个具体的环节。从小旅馆的管理系统中发现，员工的工作是自己主动选择的，哈哈，这不就是极限编程中的做法吗；每项工作都有完整的验收标准，并且有专门的服务监督人员去校验并纠正工作中的错误，这不就是code review吗，敏捷开发过程本身就是一套高效率的工作系统。</p>

<p>另外吸引我的一部分是工作中的本性，管理者不可能让员工按照他的本意工作，那些制定的条条框框、各类规章制度，其实都是摆设，管理者真正可以做的，就是创造和维持一个环境，在这个环境下，员工的技能会得到提升，员工的心情会舒畅，在这个过程中所做的一切，就是工作。反过来说，一个人工作中的表现，从中反映出的也是他的本性，如果我们对待工作马虎，那我们本身就是个马虎懒散的人。</p>

<p>旅馆老板的经营理念也很触动我，第一条，顾客并非永远都是正确的，不过，无论其观点是否正确，我们都应该努力满足他们的需求。按照我的脾气，不正确的是绝对不会去做的，这是今后需要改进的地方，发现客户的真实需求和对客户的价值，而不是纠结于知否正确这个结论。第二条，每个员工应该竭尽所能将自己负责的工作做到最好，假如他做不到，也应该按照这一标准来要求自己，直到他能做到为之。如果他不愿意用这样的标准要求自己，那她就应该离开去找一份更适合自己的工作。这是态度的问题，态度决定一切，正确的态度是对一个员工的基本要求，至少我招聘时是这样认为的。第三条，在旅馆里所有我们会做的事情都要经受检测，而检测的标准就是那些我们还不会做的事情。由此暴露出来的矛盾，就是旅馆成长和发展的动力。这个理念能够让我们不断的前进，正像我们现在做的，每个人心中有对自己工作满分的标准，给现在的自己打个分，衡量出差距，然后在工作中不断改进。我觉得老板的比喻很形象，他觉得公司就是一个武馆，员工就是这里的习武之人，而习武之人最大的对手就是自己。作者总结到高效的工作系统是个竞赛系统，一定不要理解错了，竞赛不是员工之间的竞赛，是关于个人行为的竞赛。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[模式，模式，还是模式]]></title>
    <link href="http://archiechen.github.com/blog/2012/11/01/mo-shi-%2Cmo-shi-%2Chuan-shi-mo-shi/"/>
    <updated>2012-11-01T16:59:00+08:00</updated>
    <id>http://archiechen.github.com/blog/2012/11/01/mo-shi-,mo-shi-,huan-shi-mo-shi</id>
    <content type="html"><![CDATA[<p>《突破瓶颈》读到第六章，就开始阐述一个重要的概念：模式。书中的背景是作者和一家馅饼店老板娘的对话，并一直用麦当劳作为榜样。麦当劳作为馅饼店的榜样很合适，毕竟卖馅饼和卖汉堡包没啥本质区别，卖咖啡、卖炸鸡的也一样，可我从事的IT行业和他们是有本质的区别的呀，看得我心烦不已，硬着头皮读到了第十一章。书中反复称赞特许经营模式，甚至称其为转折性革命，的确这些采用特许经营模式的公司中很多都取得了成功，但很少见到有成功的IT企业在用这种模式啊？</p>

<p>转念一想，作者的本意应该不会这么浅薄，他不是想引导读者去学习如何采用特许经营模式去办公司，重点应该是在“模式”上，无论是特许经营模式，还是XX模式，对于创业者来讲，重要的是要找到适合公司发展的模式。麦当劳的成功，是模式的成功，不是因为他的汉堡物美价廉，也不是因为他的薯条比别人更加香脆，而是因为麦当劳的公司运作模式可以保证任何一家店的产品都是一样的，模式是可复制的，并且在这个模式下，公司是高效运作的。难道成功IT公司的模式也是可复制的吗？这里首先要明确模式是什么，他不是具体的规章制度，不是作息时间，不是办公装潢，不是统一着装；模式是一种做事的态度，一种文化氛围，甚至一种价值观，当公司所有员工的模式保持一致时，公司有了适合自己的模式。</p>

<p>模式不是固定不变的，不同行业、不同环境的模式用法也不是固定的，模式是可以自我进化的，只有具备了自我完善的功能，公司才会持续发展，才不会依赖某个具体的管理者，而管理者们所要做的就是，保证模式的正常的运行，能够及时的修正错误。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用doctest测试重载dict.sefdefault方法]]></title>
    <link href="http://archiechen.github.com/blog/2012/10/31/shi-yong-doctestce-shi-zhong-zai-dict-dot-sefdefaultfang-fa/"/>
    <updated>2012-10-31T17:58:00+08:00</updated>
    <id>http://archiechen.github.com/blog/2012/10/31/shi-yong-doctestce-shi-zhong-zai-dict-dot-sefdefaultfang-fa</id>
    <content type="html"><![CDATA[<p>为了避免字典中取出的值为None，通常会使用dict的setdefult方法：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">task</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
</span><span class='line'><span class="n">urls</span> <span class="o">=</span> <span class="n">task</span><span class="o">.</span><span class="n">setdefult</span><span class="p">(</span><span class="s">&#39;urls&#39;</span><span class="p">,[])</span>
</span></code></pre></td></tr></table></div></figure>


<p>当字典中存在key时，无论value是否为None，setdefault方法都会忽略default值，直接返回value。为了避免这种情况，引入了一段重复代码逻辑，每次取一个key都要这样写：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">urls</span> <span class="o">=</span> <span class="n">task</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;urls&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">task</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;urls&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="p">[]</span>
</span><span class='line'><span class="n">dirs</span> <span class="o">=</span> <span class="n">task</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;dirs&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">task</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;dirs&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="p">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码可读性下降了，决定采用采用子类化内建类型的方式重构。重构后代码如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">task</span> <span class="o">=</span> <span class="n">alwaysdefaultdict</span><span class="p">(</span><span class="n">task</span><span class="p">)</span>
</span><span class='line'><span class="n">urls</span> <span class="o">=</span> <span class="n">task</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="s">&#39;urls&#39;</span><span class="p">,[])</span>
</span><span class='line'><span class="n">dirs</span> <span class="o">=</span> <span class="n">task</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="s">&#39;dirs&#39;</span><span class="p">,[])</span>
</span></code></pre></td></tr></table></div></figure>


<p>重构过程中，先写doctest，alwaysdefaultdict.py文件内容如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#-*- coding:utf-8 -*-</span>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">重载setdefault方法，当key存在，并且value为空字符串或None时，也会设置为defaultvalue。</span>
</span><span class='line'><span class="sd">&gt;&gt;&gt; d = alwaysdefaultdict()</span>
</span><span class='line'><span class="sd">&gt;&gt;&gt; d.setdefault(&#39;key&#39;,&#39;&#39;)</span>
</span><span class='line'><span class="sd">&#39;&#39;</span>
</span><span class='line'><span class="sd">&gt;&gt;&gt; d.setdefault(&#39;key&#39;,&#39;default&#39;)</span>
</span><span class='line'><span class="sd">&#39;default&#39;</span>
</span><span class='line'><span class="sd">&gt;&gt;&gt; d.get(&#39;key&#39;)</span>
</span><span class='line'><span class="sd">&#39;default&#39;</span>
</span><span class='line'><span class="sd">&gt;&gt;&gt; d.setdefault(&#39;key&#39;,&#39;newvalue&#39;)</span>
</span><span class='line'><span class="sd">&#39;default&#39;</span>
</span><span class='line'><span class="sd">&gt;&gt;&gt; d.get(&#39;no_key&#39;)</span>
</span><span class='line'><span class="sd">&gt;&gt;&gt; d[&#39;newkey&#39;]=&#39;newvalue&#39;</span>
</span><span class='line'><span class="sd">&gt;&gt;&gt; d.get(&#39;newkey&#39;)</span>
</span><span class='line'><span class="sd">&#39;newvalue&#39;</span>
</span><span class='line'><span class="sd">&gt;&gt;&gt; d[&#39;newkey&#39;]</span>
</span><span class='line'><span class="sd">&#39;newvalue&#39;  </span>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">alwaysdefaultdict</span><span class="p">(</span><span class="nb">dict</span><span class="p">):</span>
</span><span class='line'>    <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<p>这时候执行测试的结果是：</p>

<pre><code>$ nosetests --with-doctest alwaysdefaultdict.py
F
......
Traceback (most recent call last):
......
Failed example:
    d.setdefault('key','default')
Expected:
    'default'
Got:
    ''
......
Failed example:
    d.get('key')
Expected:
    'default'
Got:
    ''
......
Failed example:
    d.setdefault('key','newvalue')
Expected:
    'default'
Got:
    ''
----------------------------------------------------------------------
Ran 1 test in 0.035s

FAILED (failures=1)
</code></pre>

<p>然后实现代码逻辑，最后代码如下：</p>

<div><script src='https://gist.github.com/3986136.js?file='></script>
<noscript><pre><code>#-*- coding:utf-8 -*-
'''
重载setdefault方法，当key存在，并且value为空字符串或None时，也会设置为defaultvalue。
&gt;&gt;&gt; d = alwaysdefaultdict()
&gt;&gt;&gt; d.setdefault('key','')
''
&gt;&gt;&gt; d.setdefault('key','default')
'default'
&gt;&gt;&gt; d.get('key')
'default'
&gt;&gt;&gt; d.setdefault('key','newvalue')
'default'
&gt;&gt;&gt; d.get('no_key')
&gt;&gt;&gt; d['newkey']='newvalue'
&gt;&gt;&gt; d.get('newkey')
'newvalue'
&gt;&gt;&gt; d['newkey']
'newvalue'
'''


class alwaysdefaultdict(dict):
    def setdefault(self, key, defaultvalue):
        if self.has_key(key):
            if self.get(key):
                return self.get(key)
            else:
                del self[key]
        return super(alwaysdefaultdict, self).setdefault(key, defaultvalue)</code></pre></noscript></div>


<p>执行doctest的结果：</p>

<pre><code>$ nosetests --with-doctest alwaysdefaultdict.py
.
----------------------------------------------------------------------
Ran 1 test in 0.096s

OK
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[三重身份]]></title>
    <link href="http://archiechen.github.com/blog/2012/10/30/san-zhong-shen-fen/"/>
    <updated>2012-10-30T10:47:00+08:00</updated>
    <id>http://archiechen.github.com/blog/2012/10/30/san-zhong-shen-fen</id>
    <content type="html"><![CDATA[<p>被迫读书虽然很不爽，但也没啥坏处，坐车随便翻了一下《突破瓶颈》，还不错，一口气读到了第五章。</p>

<p>书中提到想要创业的人必须集三种身份于一身，创业者、管理者和专业人士，我自己的理解，这三种身份并不仅仅是想创业的人才有，而是每个人都有，只不过比例不同罢了。创业者代表理想、管理者代表意志、专业人士代表着现实。这三种身份不仅影响着创业的成功率，对工作角色以及能否在当前角色中高效工作也有着很大的影响。</p>

<p>创业者，我经常会幻想，理想的状态是什么？理想的团队、理想的工作环境、理想的公司、理想的系统等等。有些不切实际，有些触手可得，这些往往都在脑子里昙花一现，极少能被付诸实施，也许是创业者这个身份所获得的权力很低，经常被专业人士和管理者打败。要想做出成绩，要不断增强创业者的实力才行。</p>

<p>管理者，自从带团队以来，管理的职责越来越多，对沟通和计划能力的要求越来越高，在缺少创业者的指导下，管理者也很难做出正确的判断，往往会对专业人士听之任之，这也是导致创业者长期被打压的原因之一。不过管理者有他的强项，看待问题很淡定，会冷静的思考事情的前因后果，不会武断，并且能接受其他人的意见和建议。沟通时会采用平易近人的态度，引导其他团队成员采用更加高效的工作方式，找到问题、分析问题、解决问题，然后总结，避免重复犯错。</p>

<p>专业人士，这是个很棘手的家伙。脾气暴躁，以自我为中心，只要遇到看不顺眼的人和事，就会暴跳如雷，拨开旁人，独自战斗。喜欢与人争论，只是为了争论而已。喜欢深入了解细节，而忽略了大环境和上下文。这个家伙力量强大，估计我70%都被他控制着。当然现在不是：)</p>

<p>要想在当前的工作角色中获得成功，必须要调整这三种身份的力量比例，创业者20%，管理者50%，专业人士30%。需要创业者指明方向，又不至于目标太多；需要管理者落实计划，带领团队稳步前行；专业人士有他的优势，不能彻底打压，需要他对细节的了解，为管理者和创业者提供具体的反馈信息。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacOS下安装ruby-1.9.3-p286]]></title>
    <link href="http://archiechen.github.com/blog/2012/10/29/macosxia-an-zhuang-ruby-1-dot-9-3-p286/"/>
    <updated>2012-10-29T17:34:00+08:00</updated>
    <id>http://archiechen.github.com/blog/2012/10/29/macosxia-an-zhuang-ruby-1-dot-9-3-p286</id>
    <content type="html"><![CDATA[<p>在小峰同学的帮助下，终于配好了<a href="http://octopress.org">Octopress</a>，装ruby的时候遇到了问题。因为mac之前装的是ruby1.87，而Octopress需要1.9以上的版本，只好升级了。但不知为何，使用rvm安装ruby奇慢无比，不知道什么时候能装完，实在忍受不了了，就自己下载了ruby（1.9.3）的源代码，configure make &amp; make install之后，执行gem的时候会报异常：</p>

<pre><code>It seems your ruby installation is missing psych (for YAML output).
</code></pre>

<p>google了一下，需要安装yaml的包，于是下载之：</p>

<pre><code>wget http://pyyaml.org/download/libyaml/yaml-0.1.4.tar.gz
</code></pre>

<p>安装之后，有重新ruby，但执行gem仍然报同样的错误，又仔细搜索了一下google，找到一篇文章《<a href="http://collectiveidea.com/blog/archives/2011/10/31/install-ruby-193-with-libyaml-on-centos/">Install Ruby 1.9.3 with libyaml on CentOS</a>》,发现做法是一样的，只是执行configure时需要指定参数，而我使用的都是默认值，虽然指定的和默认值是一样的。按照文中的做法操作之后，成功了！</p>

<pre><code>$ wget http://pyyaml.org/download/libyaml/yaml-0.1.4.tar.gz
$ tar xzvf yaml-0.1.4.tar.gz
$ cd yaml-0.1.4
$ ./configure --prefix=/usr/local
$ make
$ make install

$ wget http://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.3-p286.tar.gz
$ tar xzvf ruby-1.9.3-p286.tar.gz
$ cd ruby-1.9.3-p286
$ ./configure --prefix=/usr/local --enable-shared --disable-install-doc --with-opt-dir=/usr/local/lib
$ make
$ make install
</code></pre>
]]></content>
  </entry>
  
</feed>
